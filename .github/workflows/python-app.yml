# This is a basic workflow to help you get started with Actions.
# The name will appear in the "Actions" tab of your repository.
name: Python Application Test

# Controls when the workflow will run.
on:
  # Triggers the workflow on push events for the "main" branch.
  push:
    branches: [ "main" ]
  # Also allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  # This workflow contains a single job called "build".
  build:
    # The type of runner that the job will run on.
    # We use the latest version of Ubuntu.
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:
      # Step 1: Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Sets up the Python environment.
      # We specify version 3.10, but you can change this.
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step 3: Installs pip and project dependencies.
      # It looks for the requirements.txt file you created.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      # Step 4: Run the main analysis script.
      # This is the "test". If the script runs without throwing an error, the job will succeed.
      # If it throws any error (like a NameError, TypeError, etc.), the job will fail.
      # Replace 'run_all_custom_solvers.py' with the name of the script you want to test.
      - name: Run analysis script to test for errors
        run: |
          python run_all_custom_solvers.py
